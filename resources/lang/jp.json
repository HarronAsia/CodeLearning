  {
      "User": "ユーザー",
      "Account": "アカウント",
      "Notifications": "通知",
      "All Unread Messages": "すべての未読メッセージ",
      "Profile": "プロフィール",
      "Search": "探す",

      "English": "英語",
      "Japan": "日本",
      "VietNam": "ベトナム",

      "OUR BRANDS": "スローガン",
      "Not only should we think or act based on our own perspective, but we also need to consider other peoples points of view.": "自分の視点で考えたり行動したりするだけでなく、他人の視点も考慮する必要があります。",
      "Express sincere thanks.": "心からの感謝を表します。",
      "As colleagues, we should treat each other with kindness and respect, irrespective of ages.": "私たちは同僚として、年齢に関係なく、お互いに優しく敬意を持って接するべきです。",
      "CATEGORIES": "カテゴリ",
      "HOME": "ホーム",
      "ABOUT": "企業情報",
      "SERVICES": "サービス内容",
      "CONTACT": "お問い合わせ",
      "PRIVACY": "プライバシー",
      "Follow us": "フォローする",
      "Contact": "お問い合わせ",
      "Room 301, Nguyen Lam Tower, 133 Duong Batrak, District 1, District 8, HCM City.": "301号室、グエンラムタワー、133ドゥオンバトラック、区第1区、8区、HCM市。",
      "Copyright": "著作権",

      "About": "約",
      "Information": "情報",
      "Social Link": "ソーシャルリンク",
      "Google Plus": "グーグルプラス(Google Plus)",
      "AIM": "AOLインスタントメッセンジャー(AIM)",
      "Window LIve": "ウィンドウリブ(Window LIve)",
      "Yahoo": "ヤフー(Yahoo)",
      "Skype": "スカイプ(Skype)",
      "Google Talk": "Googleトーク(Google Talk)",
      "Facebook": "フェイスブック(Facebook)",
      "Twitter": "ツイッター(Twitter)",
      "Email": "Eメール",
      "Phone": "電話",
      "Date Of Birth": "生年月日",
      "Profession": "職業",
      "Joined In:": "参加：",
      "Last Updated:": "最終更新：",
      "Edit Profile": "プロファイル編集",
      "Location": "ロケーション",
      "Personal ID": "個人ID",
      "Issued Date": "発行日",
      "Issued By": "が発行",
      "Supervisor name": "監督者名",
      "Supervisor Date Of Birth": "監督者の生年月日",
      "Your Bio": "あなたの経歴",
      "Edit Information": "情報を編集",
      "Add Information": "情報を追加",
      "Your Image": "あなたのイメージ",
      "Your name": "あなたの名前",
      "Your Birthday": "あなたの誕生日",
      "Your Phone Number": "あなたの電話番号",
      "Your Email": "あなたのメール",
      "Enter Your Email": "メールアドレスを入力",
      "Your Password": "あなたのパスワード",
      "Enter Your Password": "パスワードを入力してください",

      "Your Place": "あなたの場所",
      "Enter Your Place": "あなたの場所を入力してください",
      "Your Job": "あなたの仕事",
      "Enter Your Job": "あなたの仕事を入力してください",
      "Your Personal ID": "あなたの個人ID",
      "Enter Your Personal ID": "個人IDを入力してください",
      "Your Issued Date": "あなたの発行日",
      "Enter Your Issued Date": "発行日を入力してください",
      "Your Issued By": "あなたの発行者",
      "Enter Your Issued By": "発行者を入力してください",
      "Your Supervisor(Optional if you are under 14)": "上司（14歳未満の場合は任意）",
      "Enter Your Supervisor Name": "スーパーバイザー名を入力してください",
      "Your Supervisor Date Of Birth(Optional if you are under 14)": "監督者の生年月日（14歳未満の場合は任意）",
      "Enter Your Supervisor Dob": "スーパーバイザードブを入力してください",
      "Your Google Plus Name": "Googleプラス名",
      "Enter Your Google Plus Name": "Googleプラス名を入力してください",
      "Your Google Plus Link": "あなたのグーグルプラスリンク",
      "Enter Your Google Plus Link": "Google Plusリンクを入力してください",
      "Your AIM link": "AIMリンク",
      "Enter Your AIM link": "AIMリンクを入力してください",
      "Your Window Live link": "あなたのウィンドウライブリンク",
      "Enter Window Live link": "ウィンドウライブリンクを入力",
      "Your Yahoo link": "Yahooリンク",
      "Enter Yahoo link": "Yahooリンクを入力してください",
      "Your ICQ link": "ICQリンク",
      "Enter ICQ link": "ICQリンクを入力",
      "Your Skype link": "Skypeリンク",
      "Enter Skype link": "Skypeリンクを入力してください",
      "Your Google Talk link": "Googleトークのリンク",
      "Enter Google Talk link": "Googleトークのリンクを入力してください",
      "Your Facebook link": "あなたのFacebookリンク",
      "Enter Facebook link": "Facebookリンクを入力",
      "Your Twitter link": "あなたのTwitterリンク",
      "Enter Twitter link": "Twitterリンクを入力してください",
      "Your Detail": "あなたの詳細",
      "Enter Your Bio Detail": "経歴を入力してください",

      "A fresh verification link has been sent to your email address.": "新しい確認リンクがあなたのメールアドレスに送信されました。",
      "All rights reserved.": "全著作権所有。",
      "Before proceeding, please check your email for a verification link.": "続行する前に、メールで確認リンクを確認してください。",
      "click here to request another": "ここをクリックして別のものをリクエスト",
      "Confirm Password": "パスワードを認証する",
      "E-Mail Address": "電子メールアドレス",
      "Error": "エラー",
      "Forbidden": "禁じられた",
      "Forgot Your Password?": "パスワードをお忘れですか？",
      "Hello!": "こんにちは！",
      "hi": "こんにちは",
      "Login": "ログインする",
      "Logout": "ログアウト",
      "Name": "名前",
      "Page Expired": "ページが期限切れです",
      "Page Not Found": "ページが見つかりません",
      "Password": "パスワード",
      "Please click the button below to verify your email address.": "下のボタンをクリックして、メールアドレスを確認してください。",
      "Register": "登録",
      "Remember Me": "覚えてください",
      "Reset Password": "パスワードを再設定する",
      "Reset Password Notification": "パスワード通知のリセット",
      "Send Password Reset Link": "パスワードリセットリンクを送信",
      "Service Unavailable": "サービスは利用できません",
      "Toggle navigation": "ナビゲーションを切り替える",
      "Too Many Requests": "リクエストが多すぎます",
      "Unauthorized": "無許可",
      "Verify Email Address": "メールアドレスを確認",
      "Title": "題名",
      "View": "見る",
      "Edit": "編集する",
      "Delete": "削除",
      "Create": "作成します",
      "Comments": "注釈",
      "Create new comment": "新しいコメントを作成",
      "Edit Comment": "コメントを編集",
      "Comment": "コメント",
      "Reply": "返信",
      "Submit": "届ける ",
      "Thank you for using our application!": "私たちのアプリケーションをご利用いただきありがとうございます！",
      "Home": "ホーム",
      "Community": "コミュニティ",
      "Language": "言語",
      "LARAVEL": "ララヴェル",
      "Laravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic.": "Laravelは、堅牢で理解しやすいオープンソースのPHPフレームワークです。モデルビューコントローラーの設計パターンに従います。 Laravelは、Webアプリケーションの作成に役立つさまざまなフレームワークの既存のコンポーネントを再利用します。このように設計されたWebアプリケーションは、より構造化され、実用的です。",
      "Learn More": "もっと詳しく知る",
      "Installation": "インスト",
      "The Laravel framework has a few system requirements. All of these requirements are satisfied by the Laravel Homestead virtual machine, so its highly recommended that you use Homestead as your local Laravel development environment.": "Laravelフレームワークにはいくつかのシステム要件があります。これらの要件はすべてLaravel Homestead仮想マシンによって満たされるため、ローカルのLaravel開発環境としてHomesteadを使用することを強くお勧めします。",
      "The Basics": "基礎",
      "Everything you need to know about Laravel": "Laravelについて知っておくべきことすべて",
      "Requirements": "必要条件",
      "Installing": "インスト",
      "Configuration": "設定",
      "BCMath PHP Extension": "BCMath PHP拡張",
      "Ctype PHP Extension": "Ctype PHP拡張",
      "Fileinfo PHP extension": "Fileinfo PHP拡張",
      "JSON PHP Extension": "JSON PHP拡張",
      "Mbstring PHP Extension": "Mbstring PHP拡張",
      "OpenSSL PHP Extension": "OpenSSL PHP拡張",
      "PDO PHP Extension": "PDO PHP拡張",
      "Tokenizer PHP Extension": "Tokenizer PHP拡張",
      "XML PHP Extension": "XML PHP拡張",
      "Via Laravel Installer": "Laravelインストーラー経由",
      "First, download the Laravel installer using Composer:": "まず、Composerを使用してLaravelインストーラーをダウンロードします。",
      "Then, just type:": "次に、次のように入力します。",
      "Your-Project-Name": "あなたのプロジェクト名",
      "Via Composer Create-Project": "Composer Create-Project経由",
      "Alternatively, you may also install Laravel by issuing the Composer create-project command in your terminal:": "または、ターミナルでComposer create-projectコマンドを発行してLaravelをインストールすることもできます。",
      "Configuration Processes": "構成プロセス",
      "Step": "ステップ",
      "Public Directory": "公開ディレクトリ",
      "Configure your web servers document / web root to be the public directory": "Webサーバーのドキュメント/ Webルートをパブリックディレクトリに構成します",
      "Virtual Host:": "仮想ホスト：",
      "Document Root:": "ドキュメントルート：",
      "Server Name:": "サーバー名：",
      "Error Log(Optional):": "エラーログ（オプション）：",
      "Transfer Log(Optional):": "転送ログ（オプション）：",
      "AddDefaultCharset:": "デフォルトの文字セットを追加：",
      "AllowEncodedSlashes :": "エンコードされたスラッシュを許可：",
      "Directory :": "ディレクトリ：",
      "Option : Indexes ->": "オプション：インデックス->",
      "AllowOverride :": "上書きを許可",
      "Enter Your Name": "あなたの名前を入力してください",
      "Enter Your Phone Number": "電話番号を入力してください",

      "Define the port of your machine( in here is port 80)": "マシンのポートを定義します（ここではポート80です）。",
      "Define the path to your project": "プロジェクトへのパスを定義します",
      "Define the name of your application": "アプリケーションの名前を定義します",
      "If you want to see the return error logs then add this": "戻りエラーログを表示する場合は、これを追加します",
      "If you want to see how the traffic inside your project work then add this": "プロジェクト内のトラフィックがどのように機能するかを確認したい場合は、これを追加します",
      "The default charset of HTML is UTF-8, so add this to run your project better": "HTMLのデフォルトの文字セットはUTF-8なので、これを追加してプロジェクトをより適切に実行します",
      "Add this to easily customize your URL": "これを追加して、URLを簡単にカスタマイズします",
      "Document Root act as location of your project while Directory letting you specify Apache configuration rules to only apply to a specific directory": "ドキュメントルートはプロジェクトの場所として機能し、ディレクトリでは特定のディレクトリにのみ適用するApache構成ルールを指定できます",
      "If a URL which maps to a directory is requested, and there is no DirectoryIndex (e.g., index.html) in that directory, then mod_autoindex will return a formatted listing of the directory.": "ディレクトリにマップするURLがリクエストされ、そのディレクトリにDirectoryIndex（index.htmlなど）がない場合、mod_autoindexはディレクトリのフォーマットされたリストを返します。",
      "AllowOverride directive is used to allow the use of .htaccess within the web server to allow overriding of the Apache config on a per directory basis": "AllowOverrideディレクティブは、Webサーバー内で.htaccessを使用して、ディレクトリごとにApache構成を上書きできるようにするために使用されます。",

      "Configuration Files": "構成ファイル",
      "All Laravel framework configuration files are located in the config directory config directory.": "すべてのLaravelフレームワーク構成ファイルは、configディレクトリーにあります。",

      "After installing Laravel, you may need to configure some permissions.": "Laravelをインストールした後、いくつかの権限を構成する必要がある場合があります。",
      "Storage:": "ストレージ：",
      "your project path": "プロジェクトパス",
      "Bootstrap/Cache:": "ブートストラップ/キャッシュ：",
      "If Failed Only": "失敗した場合のみ",
      "Set everything 777 and try again . Then find whats the problem and fixed it then set back to 775": "すべてを777に設定して、再試行してください。次に、問題の原因を見つけて修正し、775に戻します。",
      "Meaning": "意味",
      "777 or 775 means( From left to right):": "777または775の意味（左から右へ）：",
      "Readable-The other can only read the page": "読み取り可能(Readable)-他のユーザーはページを読み取ることしかできません",
      "Writable-The other can do input but not affected to system": "書き込み可能(Writable)-もう一方は入力できますが、システムには影響しません",
      "Executable- The other can act as an administration": "実行可能ファイル(Executable)-他方は管理者として機能できます",

      "Application Key": "アプリケーションキー",
      "The next thing you should do after installing Laravel is set your application key to a random string that 32 characters long.": "Laravelのインストール後に次に行うべきことは、アプリケーションキーを32文字の長さのランダムな文字列に設定することです。",
      "Command:": "コマンド：",

      "Learn Laravel is easy": "Laravelは簡単に学ぶ",

      "Just 3 months you can learn all the structures of the Laravel Framework": "わずか3か月でLaravelフレームワークのすべての構造を学ぶことができます",

      "Routing": "ルーティング(Routing)",

      "Middleware": "ミドルウェア",

      "CSRF Protection": "CSRF保護",

      "Controllers": "コントローラー(Controller)",

      "Request": "リクエスト(Request)",

      "Responses": "反応(Response)",

      "Views": "フロントエンドページ(Views)",

      "URL Generation": "URLの生成",

      "Session": "セッション(Session)",

      "Validation": "検証(Validation)",

      "Error Handling": "エラー処理(Error Handling)",

      "Logging": "ロギング(Logging)",


      "Basic Route": "基本ルート(Basic Route)",
      "something": "何か",
      "You can name anything you want": "好きな名前を付けることができます",
      "Your Controller": "あなたのコントローラー",
      "Your Action": "あなたの行動",
      "Explaination": "説明",
      "The Above code is that whenever you type /something on your URL , it will get the request and go to your controller which then activate the action that set for that route only": "上記のコードは、URLに/ somethingと入力すると、リクエストを受け取り、コントローラーに移動して、そのルートにのみ設定されているアクションをアクティブにするというものです",
      "Example": "例",
      "More Routes Method": "追加ルートメソッド",
      "This Route will retrieve the /something in the URL": "このルートは、URL内の/何かを取得します",
      "This Route will insert the /something to the URL": "このルートは/ somethingをURLに挿入します",
      "This Route will ask you to send the /something with the value you want to update.": "このルートは、更新する値を持つ/ somethingを送信するように要求します。",
      "some value": "ある程度の価値",
      "This Route will ask you to send the /something with the value you want to delete.": "このルートは、削除する値を持つ/ somethingを送信するように要求します。",
      "Route is basicially your URL, which is anything behind your main domain, and it mainly stored in the routes/web.php": "ルートは基本的にあなたのメインドメインの背後にあるあなたのURLであり、主にroutes / web.phpに保存されています",

      "Redirect Routes": "リダイレクトルート(Redirect Route)",
      "If you are defining a route that redirects to another URI, you may use the Route::redirect method. This method provides a convenient shortcut so that you do not have to define a full route or controller for performing a simple redirect:": "別のURIにリダイレクトするルートを定義している場合は、Route :: redirectメソッドを使用できます。このメソッドは便利なショートカットを提供するため、単純なリダイレクトを実行するために完全なルートやコントローラーを定義する必要はありません。",
      "here": "ここに",
      "there": "そこ",
      "You can customize the option for the redirect as well": "リダイレクトのオプションもカスタマイズできます",
      "Redirect Number": "リダイレクト番号",

      "Mutiple Choice: Indicates multiple options for the resource and could be used to present different format options for video, list files with different extensions, or word sense disambiguation": "複数選択(Mutiple Choice)：リソースの複数のオプションを示し、ビデオのさまざまなフォーマットオプションを提示したり、拡張子が異なるファイルをリストしたり、単語の意味を明確にしたりするために使用できます",
      "Moved Permanently: This basically will make all the routes to move from here to there permanently": "恒久的に移動(Moved Permanently)：これは基本的にすべてのルートをここからそこに永久に移動します",
      "Moved Temporarily: By default, redirect will return to this code because it will only remember the route temporary": "一時的に移動(Moved Temporarily)：一時的にルートのみを記憶するため、デフォルトではリダイレクトはこのコードに戻ります",
      "See Other: the response to the request can be found under another URI using a GET method. When received in response to a PUT, it should be assumed that the server has received the data and the redirect should be issued with a separate GET message": "その他を参照(See Other)：リクエストへの応答は、GETメソッドを使用して別のURIで見つけることができます。 PUTへの応答として受信された場合、サーバーがデータを受信したと想定し、リダイレクトは別のGETメッセージで発行する必要があります",
      "Temporary Redirect: It different from the 302. With the advent of HTTP 1.1, 307 has replaced it as a valid temporary redirect.": "一時的なリダイレクト(Temporary Redirect)：302とは異なります。HTTP1.1の登場により、307はそれを有効な一時的なリダイレクトとして置き換えました。",
      "While HTTP method in 302 can easily change , 307 requires all HTTP method should remain the same": "302のHTTPメソッドは簡単に変更できますが、307ではすべてのHTTPメソッドが同じである必要があります",

      "View Routes": "ルートを表示(View Routes)",
      "If your route only needs to return a view, you may use the Route::view method. Like the redirect method, this method provides a simple shortcut so that you do not have to define a full route or controller": "ルートがビューを返すだけでよい場合は、Route :: viewメソッドを使用できます。リダイレクトメソッドと同様に、このメソッドは簡単なショートカットを提供するため、完全なルートやコントローラーを定義する必要はありません",
      "welcome": "ようこそ",
      "In here , when the Route get the welcome it will return the views.welcome.blade.php": "ここでは、ルートが歓迎されると、views.welcome.blade.phpが返されます",
      "You can also attach the value you want the page to have inside the method": "メソッド内でページに設定する値を添付することもできます",
      "name": "名前",
      "In here , when the Route get the welcome it will return the views.welcome.blade.php with the value name is Harron": "ここでは、ルートがウェルカムを取得すると、views.welcome.blade.phpが返され、値の名前はHarronになります。",
      "You can also attach the Page inside folder as well": "フォルダ内のページを添付することもできます",
      "Your Folder": "あなたのフォルダ",
      "In here , when the Route get the welcome it will return theviews.YourFolder.welcome.blade.php": "ここでは、ルートが歓迎されると、views.あなたのフォルダ.welcome.blade.phpが返されます",

      "Required Parameters": "必須パラメーター(Required Parameters)",
      "Sometimes inside your project, you will want to get something dynamically. You can easily set it like this": "プロジェクト内で、動的に何かを取得したい場合があります。このように簡単に設定できます",
      "In here , id act as a dynamic variable which will fetch the user id automatically": "ここでは、{id}はユーザーIDを自動的に取得する動的変数として機能します",
      "This method will help you to easily create a website with many users without having to set static for each user . But it also contains the error which you will encounter everytime you code. Its called Conflicting routes ": "この方法を使用すると、ユーザーごとに静的に設定する必要なく、多くのユーザーがいるWebサイトを簡単に作成できます。ただし、コーディングするたびに発生するエラーも含まれます。競合するルートと呼ばれています",
      "Problem Example": "問題の例",
      "In the problem here , the framework will detect the route with the variable {id} behind so whenever you typed /something/{id}, it will redirect to /user/{id}. ": "ここでの問題では、フレームワークは{id}変数が後ろにあるルートを検出するため、/何か/{ID}を入力するたびに、/ユーザー/{ID}にリダイレクトされます。",
      "Solution": "解決",
      "user": "ユーザー",
      "Something": "何か",
      "Somethings": "何か",
      "somethings": "何か",
      "In here , the {id},which has been attached to the variable $id, will go to Eloquent(which is Model) User and look for the id inside the Eloquentand it will go the same as the Something.": "ここでは、変数$ idに関連付けられている{id}がEloquent（モデル）ユーザーに移動し、Eloquent内のIDを探し、何かと同じになります。",
      "Many Parameters": "多くのパラメータ",
      "You can also define many parameters inside the Route as well": "また、ルート内に多くのパラメータを定義することもできます",
      "Make sure you define dynamic parameter differently and it has to be in order": "動的パラメーターを別の方法で定義していることを確認してください。",

      "Named Routes": "名前付きルート(Named Routes)",
      "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name behind the Route": "名前付きルートを使用すると、特定のルートのURLまたはリダイレクトを簡単に生成できます。ルートの背後にある名前をチェーンすることにより、ルートの名前を指定できます",
      "name something": "何かに名前を付けます",
      "By defining name for the route you can easily use the name in the Front End without having to write all the URL path": "ルートの名前を定義することにより、すべてのURLパスを記述する必要なく、フロントエンドで名前を簡単に使用できます",
      "Make sure you define each name diffrently and it must be unique": "それぞれの名前を別々に定義し、一意である必要があります。",

      "Route Groups": "ルートグループ(Route Groups)",
      "Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route": "ルートグループを使用すると、ミドルウェアや名前空間などのルート属性を、個々のルートごとに属性を定義する必要なく、多数のルート間で共有できます",
      "By Using group , any routes inside the group will be served under this group and they will have all benefits of that groups": "グループを使用することにより、グループ内のルートはすべてこのグループの下で提供され、そのグループのすべての利点を得ることができます",

      "Namespaces": "名前空間(Namespaces)",
      "Another common use-case for route groups is assigning the same PHP namespace to a group of controllers using the namespace method": "ルートグループのもう1つの一般的な使用例は、名前空間メソッドを使用して、コントローラーのグループに同じPHP名前空間を割り当てることです。",
      "By Using namespace , any routes inside the group will have all the functions in the App/Http/Controllers/Something": "名前空間を使用することにより、グループ内のルートはすべて App/Http/Controllers/何かのすべての機能を持ちます",

      "Route Prefixes": "ルートプレフィックス(Route Prefixes)",
      "YOu can easily change the route name by using Prefix method": "接頭辞を使用してルート名を簡単に変更できます",
      "before-something": "何かの前に",
      "By Using prefixes , any routes inside the group will have the URL like this /before-something/something": "プレフィックスを使用することにより、グループ内のすべてのルートは、/何かの前に/何かのようなURLになります。",

      "Fallback Routes": "フォールバックルート(Fallback Routes)",
      "When you type in the wrong route , it will return the page with all the errors. You can easily hide it with Route::fallback method.": "間違ったルートを入力すると、すべてのエラーのあるページが返されます。 Route :: fallbackメソッドで簡単に隠すことができます。",
      "By Using fallback , any routes inside this will automatically  return the 404 page if found unhandled requests": "フォールバックを使用することにより、この内部のルートは、未処理のリクエストが見つかった場合、自動的に404ページを返します。",

      "Middleware provide a convenient mechanism for filtering HTTP requests entering your application.": "ミドルウェアは、アプリケーションに入るHTTP要求をフィルタリングするための便利なメカニズムを提供します。",
      "For Example": "例えば",
      "if the user is not authenticated, the middleware will redirect the user to the login screen.": "ユーザーが認証されない場合、ミドルウェアはユーザーをログイン画面にリダイレクトします。",
      "if the user is authenticated, the middleware will allow the request to proceed further into the application": "ユーザーが認証されると、ミドルウェアはリクエストをアプリケーションにさらに進めることができます",
      "Defining Middleware": "ミドルウェアの定義",
      "To create a new middleware, use the make:middleware Artisan command:": "新しいミドルウェアを作成するには、make：middleware Artisanコマンドを使用します。",
      "This command will place a new checkSomething class within your App/Http/Middleware directory.": "このコマンドは、App / Http / Middlewareディレクトリ内に新しいcheckSomethingクラスを配置します。",
      "Now lets check if the User is Admin": "次に、ユーザーが管理者かどうかを確認しましょう",
      "if User is having a role admin, then it will proceed the User to continue further": "ユーザーが管理者の役割を持っている場合、ユーザーはさらに続行します",
      "If not, it will stop the User from going any further and return the page unauthorized page.": "そうでない場合は、ユーザーはそれ以上先に進むことができず、ページが許可されていないページに戻ります。",
      "Registering Middleware": "ミドルウェアの登録",
      "To register a middleware, go to": "ミドルウェアを登録するには、",
      "It will be outside of the folder": "フォルダの外になります",
      "and inside the": "そして中",
      "folder": "フォルダ",
      "Then search for the route Middleware variable. Because thats where we want to imply the middleware into route.": "次に、ルートミドルウェア変数を検索します。それは、ミドルウェアをルートに含めたい場所だからです。",
      "You can see in the photo , there is a line called": "あなたは写真で見ることができます、と呼ばれる行があります",
      "So the word admin is like the short term definition for Middleware": "したがって、「管理者」という言葉はミドルウェアの短期的な定義のようなものです",
      "and it will get all the functions inside the class": "クラス内のすべての関数を取得します",
      "Using Middleware": "ミドルウェアの使用",
      "Go to the": "に行く",
      "and place it like this.": "このように配置します。",
      "We have 2 ways of using the imply the middleware into route.": "ミドルウェアをルートに使用する2つの方法があります。",
      "Use it as a group": "グループで使う",
      "For grouping all the routes and imply the middleware inside, we can easily tell that no one can use these beside Admin": "すべてのルートをグループ化し、内部のミドルウェアを暗示する場合、管理者以外はこれらを使用できないことが簡単にわかります",
      "Use it as an individual": "個人で使う",
      "For individual and imply the middleware at the end, we can easily tell that this route can only be used by Admin": "個人の場合、最後にミドルウェアを暗示する場合、このルートは管理者のみが使用できることが簡単にわかります",

      "Form with": "フォーム",
      "CSRF Token": "CSRFトークン",
      "CSRF tokens can prevent CSRF attacks by making it impossible for an attacker to construct a fully valid HTTP request suitable for feeding to a victim user.": "CSRFトークンは、攻撃者が被害者ユーザーへのフィードに適した完全に有効なHTTPリクエストを作成できないようにすることで、CSRF攻撃を防止できます。",
      "Form Without": "フォームなし",
      "The attacker can easily get easily construct a request with all the parameters which then they can easily go inside our system": "攻撃者はすべてのパラメータを使用してリクエストを簡単に作成でき、それにより、システム内に簡単に入ることができます。",
      "Since the attacker cannot determine or predict the value of a users CSRF token, they cannot construct a request with all the parameters that are necessary for the application to honor the request.": "攻撃者はユーザーのCSRFトークンの値を決定または予測できないため、アプリケーションが要求を受け入れるために必要なすべてのパラメーターを使用して要求を作成することはできません。",
      "Understanding about CSRF": "CSRFについての理解",
      "Laravel makes it easy to protect your application from cross-site request forgery (CSRF) attacks.": "Laravelを使用すると、クロスサイトリクエストフォージェリ（CSRF）攻撃からアプリケーションを簡単に保護できます。",
      "Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user.": "クロスサイトリクエストフォージェリは、認証されたユーザーに代わって不正なコマンドが実行される悪意のある悪用の一種です。",
      "Test Form": "テストフォーム",

      "Introduction": "前書き",
      "Basic Controllers": "基本コントローラー",
      "Controller Middleware": "コントローラミドルウェア",
      "Resource Controllers": "リソースコントローラー",
      "Dependency Injection & Controllers": "依存性注入とコントローラー",
      "Route Caching": "ルートキャッシング",
      "In the MVC framework, the letter ‘C’ stands for Controller. It acts as a directing traffic between Views and Models.": "MVCフレームワークでは、文字「C」はコントローラーを表します。これは、ビューとモデル間のダイレクトトラフィックとして機能します。",
      "Controllers can group related request handling logic into a single class instead of defining all of your request handling logic in route": "コントローラーは、ルート内のすべての要求処理ロジックを定義する代わりに、関連する要求処理ロジックを単一のクラスにグループ化できます",
      "Create a new Controller is super easy!": "新しいコントローラーの作成はとても簡単です！",
      "After ran this command, inside the": "このコマンドを実行した後、",
      "the YourController will be stored inside this path.": "YourControllerはこのパス内に格納されます。",
      "Defining Controllers": "コントローラーの定義",
      "There are many ways you can define the variable and attach it to your page.In this example , i will only show you 3 type of commons ways to define the controller": "変数を定義してページに添付する方法はたくさんあります。この例では、コントローラーを定義するための3種類の一般的な方法のみを示します",
      "Put inside the View": "ビューの中に置く",
      "Some where": "どこかに",
      "some where": "どこかに",
      "Your Variable": "あなたの変数",
      "Thing You Want To Find": "あなたのモデル",
      "The command above can be explained by this: $view is the Blade you want it to": "あなたのケリーあなたが見つけたいもの上記のコマンドはこれで説明できます：",
      "$view is the Blade you want it to return . For Example: Welcome.blade.php so the $view will be": "$ viewは、返してほしいブレードです。例：Welcome.blade.phpなので、$ viewは",
      "Your Querry is the MYSQL command such as (findOrFail, get,all,select from where)": "あなたのQuerryは（findOrFail、get、all、select from where）のようなMYSQLコマンドです",
      "$data is the variables you want it to have inside the view. For Example: We will imply the name of something inside the view so the command will be": "$ dataは、ビュー内に含める変数です。例：ビュー内の何かの名前を暗示するので、コマンドは",
      "Name Of Something": "何かの名前",
      "Your Model": "あなたのモデル",
      "Your Querry": "あなたのケリー",
      "$mergeData is the join 2 table together, by Defaul this will be NULL.": "$mergeDataは結合2テーブルです。デフォルトでは、これはNULLになります",
      "Using Compact": "コンパクトの使用",
      "Compact is a PHP function that allows you create an array with variable names and their values.": "Compactは、変数名とその値を含む配列を作成できるPHP関数です。",
      "The command above can be explained by this:": "上記のコマンドはこれで説明できます：",
      "Right Way to use:": "正しい使い方：",
      "If you using compact, remember to do any logic like find something before using this.": "コンパクトを使用する場合は、これを使用する前に、何かを見つけるなどのロジックを実行することを忘れないでください。",
      "Using With": "での使用",
      "It basicially the same as Using View": "基本的にはビューの使用と同じ",
      "You can easily define the controller like the image above": "上記の画像のようにコントローラーを簡単に定義できます",
      "You can easily define the controller in route like the image above": "上記の画像のように、ルート内のコントローラーを簡単に定義できます",
      "You can easily using the view like the image above": "上の画像のようなビューを簡単に使用できます",
      "You can easily using the compact like the image above": "上の画像のようにコンパクトに簡単に使用できます",
      "You can easily using the with like the image above": "上の画像のように簡単に使用できます",
      "Middleware may be assigned to the controllers routes in your route": "ルート内のコントローラーのルートにミドルウェアが割り当てられている可能性があります",
      "You can use this to make every functions , which inside the route, to go through this middleware": "これを使用して、ルート内にあるすべての機能をこのミドルウェアを通過させることができます",
      "However, its more convenient to specify middleware within your controllers constructor. By create a": "ただし、コントローラーのコンストラクター内でミドルウェアを指定する方が便利です。作成することによって",
      "above the controller.": "コントローラの上",

      "Laravel resource routing assigns the typical CRUD routes to a controller with a single line of code.Basicially it will store any functions that will requests HTTP.": "Laravelリソースルーティングは、1行のコードで典型的なCRUDルートをコントローラーに割り当てます。基本的に、HTTPを要求するすべての関数を格納します。",
      "Command": "コマンド",
      "command": "コマンド",
      "This command will create a YourController with all the functions such as:": "このコマンドは、次のようなすべての機能を持つYourControllerを作成します。",
      "index": "インデックス",
      "Index": "インデックス",
      "create": "つくる",
      "store": "お店",
      "Store": "お店",
      "show": "公演",
      "Show": "公演",
      "edit": "編集する",
      "update": "更新",
      "Update": "更新",
      "delete": "削除する",
      "MInizing the Route": "ルートの最小化",
      "This command will automatically group all of those functions above and modified like this table:": "このコマンドは、上記の関数をすべて自動的にグループ化し、次の表のように変更します。",
      "Verb": "動詞",
      "URI": "URI",
      "Route Name": "ルート名",
      "Laravel resource routing assigns the typical CRUD routes to a controller with a single line of code.Basicially it will store any functions that will requests HTTP": "Laravelリソースルーティングは、典型的なCRUDルートを1行のコードでコントローラーに割り当てます。基本的には、HTTPを要求する関数をすべて格納します",

      "Injection": "注入",
      "In Route, when we use dynamic parameter like {something}. We can easily get that parameter and inject into the Controller like this:": "ルートで、{something}のような動的パラメーターを使用する場合。このパラメーターを簡単に取得して、次のようにコントローラーに注入できます。",
      "The last function which using": "使用する最後の機能",
      "will extract all of the request that currently happenning inside the page.": "現在ページ内で発生しているすべてのリクエストを抽出します。",

      "If your application is exclusively using controller based routes, you should take advantage of Laravels route cache.It will drastically decrease the amount of time it takes to register all of your applications routes and boost your route registration to 100x faster.": "アプリケーションがコントローラーベースのルートのみを使用している場合は、Laravelのルートキャッシュを利用する必要があります。これにより、アプリケーションのすべてのルートの登録にかかる時間が大幅に短縮され、ルートの登録が100倍速くなります。",
      "But if you are using Laravel framework then you need to modify a little bit before running the command below": "しかし、Laravelフレームワークを使用している場合は、以下のコマンドを実行する前に少し変更する必要があります",
      "First , go to": "まず、に行きます",
      "Then go to": "次に行きます",
      "to add this function into it.": "この関数を追加します。",
      "If you dont have UserController then dont worry, just run": "UserControllerがなくても心配する必要はありません。",
      "The reason why we need to modified before run this Command is because its happened to be a minor bugs from Laravel when they try to get the user from nothing so the function will return error cant seriliaztion": "このコマンドを実行する前に変更する必要があるのは、ユーザーが何もないところからユーザーを取得しようとしたときに、Laravelからの小さなバグであるため、関数がエラーを返さないためです。",
      "If use feel slow in the route registration, run this command to clear all the route cache.": "ルート登録で使用が遅いと感じた場合は、このコマンドを実行してすべてのルートキャッシュをクリアします。",


      "Add Community": "コミュニティを追加",
      "Latest News Post": "最新のニュース投稿",
      "read more": "続きを読む",
      "All Communities": "すべてのコミュニティ",
      "Enter Title": "タイトルを入力してください",
      "Edit Community": "コミュニティを編集",
      "Upload Your Banner image": "バナー画像をアップロード",
      "Reset": "リセット",
      "Cancel": "キャンセル",

      "Followers": "フォロワー",
      "Posts": "投稿",
      "Get Notification": "通知を受け取る",
      "Unfollow": "フォローをやめる",
      "Follow": "従う",
      "Make a publication": "出版物を作る",
      "Images": "画像",
      "What is the Topic?": "トピックとは何ですか？",
      "Detail": "細部",
      "What are you thinking?": "何を考えてるの？",
      "Upload image": "画像をアップロード",
      "Share": "共有",
      "Public": "公衆",
      "Friends": "フレンズ",
      "Private": "民間",
      "Report": "報告する",
      "Restore": "リストア",
      "Like": "のような",
      "Write your comment here": "ここにコメントを書き込んでください",
      "Replies": "返信",



      "Read All": "すべてを読む",
      "Data": "データ",
      "Created At": "作成場所",
      "Action": "アクション",

      "Cheat Sheet": "チート方法",
      "Want to make a website easy without any sweat, Feel free to join in this grand new cheat Sheet. What are you waiting now !! Its absolutely free for anyone because all you need to do is just create an account only.": "汗をかかないでウェブサイトを簡単にしたいなら、この壮大な新しいチートシートに参加してください。今何を待っています!!アカウントを作成するだけなので、誰でも無料で利用できます。",
      "Join in": "参加する",
      "Welcome to cheat environment!": "チート環境へようこそ！",
      "Read More": "続きを読む",
      "Add": "追加",
      "Post": "役職",
      "Comment System": "コメントシステム",
      "Like System": "ライクのシステム",
      "Unlike": "とは異なり",
      "Follow System": "フォローのシステム",
      "UnFollow": "フォロー解除",
      "Notification": "通知",
      "Show Notification for each User": "各ユーザーの通知を表示",
      "Read At": "通知を読む",

      "Add User": "ユーザーを追加する",
      "Edit User": "ユーザーを編集",
      "Delete User": "ユーザーを削除",
      "Restore User": "ユーザーを復元",
      "Phone Number": "電話番号",
      "Avatar Image": "アバター画像",
      "In this tutorial, you will be able to edit your own account and lets go through each of these line of code here:": "このチュートリアルでは、自分のアカウントを編集できるようになるので、次のコード行をそれぞれ見ていきましょう。",
      "First: we create a public function( You can define any name that you want) in the App/Https/UserController.php.": "まず、App / Https / UserController.phpにパブリック関数（任意の名前を定義できます）を作成します。",
      "If You dont have UserController, just type this: php artisan make:controller UserController": "UserControllerがない場合は、次のように入力してください：php artisan make：controller UserController",
      "In the code here, I use StoreUser $request , which means that i will do all the validates inside the StoreUser. This method will make your code looks cleaner and easier for developers to find when an error occur.The next variable is the $user which is the value that you insert when using dynamic parameter on route.": "ここのコードでは、StoreUser $ requestを使用しています。つまり、StoreUser内ですべての検証を実行します。この方法により、コードがより見やすく、エラーが発生したときに開発者が見つけやすくなります。次の変数は、ルートで動的パラメーターを使用するときに挿入する値である$ userです。",
      "You can read about the Validation Request in": "検証リクエストについては",
      "any name": "任意の名前",
      "It will be something like this": "こんな感じになります",
      "In Web/Route": "にWeb/Route",
      "In Blade": "にBlade",
      "This method only use for 1 dynamic parameter route only, if you have 2 or more then you should add this": "このメソッドは、1つの動的パラメータルートにのみ使用します。複数ある場合は、これを追加する必要があります",
      "In Controller": "にController",
      "some ID": "一部のID",
      "Your code": "あなたのコード",
      "Now inside the function, first i will decalre that the request i want it to be validated like this.": "次に、関数内で、最初に、このように検証するリクエストを宣言します。",
      "validated is the default function when you are using Validation Request method": "検証リクエストメソッドを使用している場合、validatedがデフォルトの関数です。",
      "To be continue....": "つづく....",
      "Full Code": "完全なコード"
  }